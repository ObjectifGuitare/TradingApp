// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradingAppTest.Data;

#nullable disable

namespace TradingAppTest.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220811094950_ChangedProfileModelField")]
    partial class ChangedProfileModelField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TradingAppTest.Profile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("TradingAppTest.Trade", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("close_datetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("close_price")
                        .HasColumnType("int");

                    b.Property<bool>("open")
                        .HasColumnType("bit");

                    b.Property<DateTime>("open_datetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("open_price")
                        .HasColumnType("int");

                    b.Property<int>("profile_id")
                        .HasColumnType("int");

                    b.Property<int>("profileid")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("profileid");

                    b.ToTable("trades");
                });

            modelBuilder.Entity("TradingAppTest.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TradingAppTest.Wire", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<int>("profileid")
                        .HasColumnType("int");

                    b.Property<bool>("withdrawal")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("profileid");

                    b.ToTable("wires");
                });

            modelBuilder.Entity("TradingAppTest.Profile", b =>
                {
                    b.HasOne("TradingAppTest.User", "user")
                        .WithMany("Profiles")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("TradingAppTest.Trade", b =>
                {
                    b.HasOne("TradingAppTest.Profile", "profile")
                        .WithMany("Trades")
                        .HasForeignKey("profileid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("profile");
                });

            modelBuilder.Entity("TradingAppTest.Wire", b =>
                {
                    b.HasOne("TradingAppTest.Profile", "profile")
                        .WithMany("Wires")
                        .HasForeignKey("profileid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("profile");
                });

            modelBuilder.Entity("TradingAppTest.Profile", b =>
                {
                    b.Navigation("Trades");

                    b.Navigation("Wires");
                });

            modelBuilder.Entity("TradingAppTest.User", b =>
                {
                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
